spacePattern=3
lineThickness=2
fontName=Arial
name=domain_basic
vertexDiameter=40
shortPattern=1
nodeThickness=2
fontSize=12
longPattern=3
===

dormant imagineMostLikelyTableInPosition : active(2)
{
	{
		status:status(-5,-305)
		robot:robot(-5,-160)
		room:room(-130,0)
		robot->status(usedOracle)*
	}
	=>
	{
		status:status(-90,-240)
		robot:robot(-90,-115)
		table:protoObject(-335,-225)
		tableSt:objectSt(-335,-400)
		room:room(-130,0)
		robot->status(usedOracle)
		table->tableSt(hasStatus)
		table->tableSt(noReach)
		table->tableSt(reachable)
		table->tableSt(table)
		robot->table(know)
		table->room(in)
	}
}

dormant verifyImaginaryTable : active(1)
{
	{
		status:status(-90,-240)
		robot:robot(-90,-115)
		table:protoObject(-335,-225)
		tableSt:objectSt(-335,-400)
		room:room(-130,0)
		robot->room(in)
		table->room(in)
		table->tableSt(reach)
		robot->table(know)
		robot->status(usedOracle)
		table->tableSt(table)
	}
	=>
	{
		status:status(-90,-240)
		robot:robot(-90,-115)
		table:object(-335,-225)
		tableSt:objectSt(-335,-400)
		room:room(-130,0)
		robot->room(in)
		table->room(in)
		table->tableSt(reach)
		robot->table(know)
		table->tableSt(table)
		table->room(in)
		table->tableSt(table)
	}
}


dormant hierarchical hierarchical_verifyImaginaryTable : active(2)  activates(verifyImaginaryTable)
{
	{
		status:status(-90,-240)
		robot:robot(-90,-115)
		table:protoObject(-335,-225)
		tableSt:objectSt(-335,-400)
		room:room(-130,0)
		robot->status(usedOracle)
		table->room(in)
		table->tableSt(table)
		robot->table(know)
		table->room(in)
		table->tableSt(table)
	}
	=>
	{
		status:status(-90,-240)
		robot:robot(-90,-115)
		table:object(-335,-225)
		tableSt:objectSt(-335,-400)
		room:room(-130,0)
		robot->room(in)
		table->room(in)
		table->tableSt(reach)
		robot->table(know)
		table->tableSt(table)
		table->tableSt(table)
	}
}

dormant recognizeObjTable : active(1)
{
	{
		status:objectSt(65,-75)
		object:object(-130,-75)
		robot:robot(-290,-75)
		robot->object(know)
		object->status(hasStatus)
		object->status(see)
		object->status(position)
		object->status(unclassified)
	}
	=>
	{
		status:objectSt(60,-75)
		object:object(-130,-75)
		robot:robot(-290,-75)
		robot->object(know)
		object->status(hasStatus)
		object->status(see)
		object->status(position)
		object->status(classified)
		object->status(table)
	}
}
